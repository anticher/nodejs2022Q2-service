openapi: 3.0.0
paths:
  /user:
    post:
      operationId: UsersController_register
      summary: Add new user
      description: Add new user information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: User data is invalid
      tags: &ref_0
        - User
    get:
      operationId: UsersController_getAll
      summary: Get all users
      description: Get users information
      parameters: []
      responses:
        '200':
          description: Gets users information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
      tags: *ref_0
  /user/{id}:
    put:
      operationId: UsersController_update
      summary: Update user
      description: Update user information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: User has been successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: UserId is invalid
        '403':
          description: Old password is wrong
        '404':
          description: User is not exist
      tags: *ref_0
    delete:
      operationId: UsersController_delete
      summary: Delete user
      description: Delete user information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: User has been successfully deleted.
        '400':
          description: UserId is invalid
        '404':
          description: User is not exist
      tags: *ref_0
    get:
      operationId: UsersController_getById
      summary: Get user by id
      description: Get user information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Gets user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: UserId is invalid
        '404':
          description: User is not exist
      tags: *ref_0
  /artist:
    post:
      operationId: ArtistsController_create
      summary: Add new artist
      description: Add new artist information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: The artist has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponse'
        '400':
          description: ArtistId is invalid
      tags: &ref_1
        - Artist
    get:
      operationId: ArtistsController_getAll
      summary: Get all artists
      description: Get artists information
      parameters: []
      responses:
        '200':
          description: Gets artists information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistResponse'
      tags: *ref_1
  /artist/{id}:
    put:
      operationId: ArtistsController_update
      summary: Update artist
      description: Update artist information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: The artist has been successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponse'
        '400':
          description: ArtistId is invalid
        '404':
          description: Artist is not exist
      tags: *ref_1
    delete:
      operationId: ArtistsController_delete
      summary: Delete artist
      description: Delete artist information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The artist has been successfully deleted.
        '400':
          description: ArtistId is invalid
        '404':
          description: Artist is not exist
      tags: *ref_1
    get:
      operationId: ArtistsController_getById
      summary: Get artist by id
      description: Get artist information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Gets artist information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponse'
        '400':
          description: ArtistId is invalid
        '404':
          description: Artist is not exist
      tags: *ref_1
  /album:
    post:
      operationId: AlbumsController_create
      summary: Add new album
      description: Add new album information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: The album has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponse'
        '400':
          description: AlbumId is invalid
      tags: &ref_2
        - Album
    get:
      operationId: AlbumsController_getAll
      summary: Get all albums
      description: Get albums information
      parameters: []
      responses:
        '200':
          description: Gets albums information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumResponse'
      tags: *ref_2
  /album/{id}:
    put:
      operationId: AlbumsController_update
      summary: Update album
      description: Update album information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: The album has been successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponse'
        '400':
          description: AlbumId is invalid
        '404':
          description: Album is not exist
      tags: *ref_2
    delete:
      operationId: AlbumsController_delete
      summary: Delete album
      description: Delete album information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The album has been successfully deleted.
        '400':
          description: AlbumId is invalid
        '404':
          description: Album is not exist
      tags: *ref_2
    get:
      operationId: AlbumsController_getById
      summary: Get album by id
      description: Get album information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Gets album information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponse'
        '400':
          description: AlbumId is invalid
        '404':
          description: Album is not exist
      tags: *ref_2
  /track:
    post:
      operationId: TracksController_create
      summary: Add new track
      description: Add new track information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: The track has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponse'
        '400':
          description: TrackId is invalid
      tags: &ref_3
        - Track
    get:
      operationId: TracksController_getAll
      summary: Get all tracks
      description: Get tracks information
      parameters: []
      responses:
        '200':
          description: Gets tracks information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackResponse'
      tags: *ref_3
  /track/{id}:
    put:
      operationId: TracksController_update
      summary: Update track
      description: Update track information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: The track has been successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponse'
        '400':
          description: TrackId is invalid
        '404':
          description: Track is not exist
      tags: *ref_3
    delete:
      operationId: TracksController_delete
      summary: Delete track
      description: Delete track information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The track has been successfully deleted.
        '400':
          description: TrackId is invalid
        '404':
          description: Track is not exist
      tags: *ref_3
    get:
      operationId: TracksController_getById
      summary: Get track by id
      description: Get track information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Gets track information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponse'
        '400':
          description: TrackId is invalid
        '404':
          description: Track is not exist
      tags: *ref_3
  /favs/artist/{id}:
    post:
      operationId: FavouritesController_addArtist
      summary: Add favourite artist
      description: Add new favourite artist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: The artist has been successfully added.
        '400':
          description: ArtistId is invalid
        '422':
          description: Artist is not exist
      tags: &ref_4
        - Favourite
    delete:
      operationId: FavouritesController_deleteArtist
      summary: Delete favourite artist
      description: Delete artist from favourite
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The artist has been successfully deleted.
        '400':
          description: ArtistId is invalid
        '404':
          description: Artist is not exist
      tags: *ref_4
  /favs/album/{id}:
    post:
      operationId: FavouritesController_addAlbum
      summary: Add favourite album
      description: Add new favourite album
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: The album has been successfully added.
        '400':
          description: AlbumId is invalid
        '422':
          description: Album is not exist
      tags: *ref_4
    delete:
      operationId: FavouritesController_deleteAlbum
      summary: Delete favourite album
      description: Delete album from favourite
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The album has been successfully deleted.
        '400':
          description: AlbumId is invalid
        '404':
          description: Album is not exist
      tags: *ref_4
  /favs/track/{id}:
    post:
      operationId: FavouritesController_addTrack
      summary: Add favourite track
      description: Add new favourite track
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: The track has been successfully added.
        '400':
          description: TrackId is invalid
        '422':
          description: Track is not exist
      tags: *ref_4
    delete:
      operationId: FavouritesController_deleteTrack
      summary: Delete favourite track
      description: Delete track from favourite
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The track has been successfully deleted.
        '400':
          description: TrackId is invalid
        '404':
          description: Track is not exist
      tags: *ref_4
  /favs:
    get:
      operationId: FavouritesController_getAll
      summary: Get all favourites
      description: Get favourites records
      parameters: []
      responses:
        '200':
          description: Gets favourites information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavouritesResponse'
      tags: *ref_4
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.1
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    UserResponse:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
        version:
          type: number
        createdAt:
          type: number
        updatedAt:
          type: number
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
        - oldPassword
        - newPassword
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
    ArtistResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        grammy:
          type: boolean
      required:
        - id
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
      required:
        - name
    AlbumResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
      required:
        - id
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
        duration:
          type: number
        artistId:
          type: string
        albumId:
          type: string
      required:
        - name
        - duration
    TrackResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        duration:
          type: number
        albumId:
          type: string
        artistId:
          type: string
      required:
        - id
        - name
        - duration
        - albumId
        - artistId
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
        albumId:
          type: string
        duration:
          type: number
    FavouritesResponse:
      type: object
      properties:
        artists:
          type: array
          items:
            type: string
        albums:
          type: array
          items:
            type: string
        tracks:
          type: array
          items:
            type: string
      required:
        - artists
        - albums
        - tracks